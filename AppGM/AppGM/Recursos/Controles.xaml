<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:AppGM"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">

    <!--#region TreeView -->

    <!--Boton toggle-->
    <Style TargetType="{x:Type ToggleButton}" x:Key="EstiloToggleTreeViewItem">

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid Width="15" Height="13" SnapsToDevicePixels="True">
                        <!--Recuadro del botoncito-->
                        <Rectangle Width="9" Height="9" Stroke="Black" SnapsToDevicePixels="True" Fill="DarkGray"/>

                        <!--Barra vertical del botoncito-->
                        <Rectangle Width="1" Height="5" Stroke="Black" x:Name="BarraVertical"/>

                        <!--Barra horizontal del botoncito-->
                        <Rectangle Width="5" Height="1" Stroke="Black" x:Name="BarraHorizontal"/>
                    </Grid>

                    <!--Cuando el toggle este presionado ocultamos la barra vertical-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BarraVertical" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <!--Tree view item-->
    <Style TargetType="{x:Type TreeViewItem}" x:Key="EstiloTreeViewItem">

        <Setter Property="ItemsSource" Value="{Binding Hijos.Elementos}"/>

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type TreeViewItem}">

                    <Grid>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <!--Linea horizontal-->
                        <Rectangle Margin="9 1 0 0" Height="1" Stroke="Black" SnapsToDevicePixels="True"/>

                        <!--Linea vertical-->
                        <Rectangle Grid.RowSpan="2" Margin="0 0 1 0" Width="1" Stroke="Black" SnapsToDevicePixels="True"/>

                        <!--Boton expandir-->
                        <ToggleButton
                            Margin="-1 0 0 0"
                            ClickMode="Press"
                            Style="{ StaticResource EstiloToggleTreeViewItem}"
                            IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.EstaExpandido, Mode=TwoWay}"/>

                        <!--Header-->
                        <Grid
                            Grid.Column="1"
                            
                            local:DragAndDrop_DrageableSeleccionMultiple.Value="True">

                            <Border 
                                
                                x:Name="BorderHeader"

                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"

                                SnapsToDevicePixels="True"

                                local:DragAndDrop_DrageableMulti.Value ="True"
                                local:DragAndDrop_ReceptorDrag.Value="True">

                                <ContentPresenter 
                                    x:Name="PART_Header"
                                    MinWidth="20"
                                    ContentSource="Header"
                                    HorizontalAlignment="{TemplateBinding HorizontalAlignment}"/>
                            </Border>
                        </Grid>

                        <!--Hijos-->
                        <ItemsPresenter
                            x:Name="ItemsHost"

                            Grid.Row="1"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            
                            Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.EstaExpandido, Converter={local:BooleanToVisibilityConverterColapsar}}"/>
                    </Grid>

                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeView}" x:Key="EstiloTreeView">

        <Setter Property="ItemsSource" Value="{Binding Hijos.Elementos}"/>

    </Style>

    <!--#endregion-->

    <!--#region ComboBoxes -->
    <!-- Estilo de checkbox que representa un item en un combo box de seleccion multiple -->
    <Style x:Key="CheckBoxMultiselectComboBox" TargetType="{x:Type CheckBox}">

        <Setter Property="Background" Value="{StaticResource Color.ComboBoxSeleccionMultiple.FondoItem.Estatico}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Color.ComboBoxSeleccionMultiple.BordeItem.Estatico}"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Setter Property="IsChecked" Value="{Binding EstaSeleccionado, Mode=OneWay}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <Border 
                        x:Name="checkBoxBorder" 
                        Background="{TemplateBinding Background}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Padding="4 3"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch">

                        <Grid
                            IsHitTestVisible="False">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!--Checkbox del item-->
                            <CheckBox
                                IsChecked="{TemplateBinding IsChecked}"/>

                            <!--Bloque de texto que muestra el contenido del item-->
                            <TextBlock
                                Grid.Column="1"
                                Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.Contenido}" 
                                Focusable="False"/>
                        </Grid>

                        <!--Binding al click izquierdo que llama a 'ComandoSeleccionar'-->
                        <Border.InputBindings>
                            <MouseBinding MouseAction="LeftClick" Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.ComandoSeleccionar}"/>
                        </Border.InputBindings>
                    </Border>

                    <ControlTemplate.Triggers>

                        <!--Cuando el item esta seleccionado-->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsChecked}" Value="True">
                            <DataTrigger.Setters>
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource Color.ComboBoxSeleccionMultiple.FondoItem.Seleccionado}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource Color.ComboBoxSeleccionMultiple.BordeItem.Seleccionado}"/>
                            </DataTrigger.Setters>
                        </DataTrigger>

                        <!--Cuando el mouse esta sobre el item-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource Color.ComboBoxSeleccionMultiple.FondoItem.MouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource Color.ComboBoxSeleccionMultiple.BordeItem.MouseOver}"/>
                        </Trigger>

                        <!--Cuando el item esta deshabilitado-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource Color.ComboBoxSeleccionMultiple.FondoItem.Deshabilitado}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource Color.ComboBoxSeleccionMultiple.BordeItem.Deshabilitado}"/>
                        </Trigger>

                        <!--Cuando el item esta siendo presionado-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource Color.ComboBoxSeleccionMultiple.FondoItem.MouseDown}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource Color.ComboBoxSeleccionMultiple.BordeItem.MouseDown}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FocusVisual2">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle 
                            Margin="2" 
                            StrokeDashArray="1 2" 
                            SnapsToDevicePixels="true" 
                            StrokeThickness="1" 
                            Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
        <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFECF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#000000"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#000000"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAECFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#000000"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
    <LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F0F0F0" Offset="0.0"/>
        <GradientStop Color="#E5E5E5" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
    <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#ECF4FC" Offset="0.0"/>
        <GradientStop Color="#DCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">

        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Border x:Name="templateRoot" Background="{StaticResource Color.ComboBox.Fondo.Estatico}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource Color.ComboBox.Borde.Estatico}" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderThickness="1" BorderBrush="Transparent" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource Color.ComboBox.Glyph.Estatico}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>

                        <!-- Hacer flechita negra cuando el mouse se posa sobre el elemento -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource Color.ComboBoxSeleccionMultiple.Glyph.MouseOver}"/>
                        </Trigger>

                        <!-- Resaltar fondo cuando mouse se posa sobre el elemento -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Color.ComboBoxSeleccionMultiple.Fondo.MouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource Color.ComboBoxSeleccionMultiple.Borde.MouseOver}"/>
                        </MultiDataTrigger>

                        <!-- Triggers para cambiar colorcitos al presionar -->

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource Color.ComboBoxSeleccionMultiple.Glyph.Presionado}"/>
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Color.ComboBoxSeleccionMultiple.Fondo.Presionado}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource Color.ComboBoxSeleccionMultiple.Borde.Presionado}"/>
                        </MultiDataTrigger>

                        <!-- Triggers para cambiar colorcitos cuando esta deshabilitado -->

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource Color.ComboBoxSeleccionMultiple.Glyph.Deshabilitado}"/>
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource Color.ComboBoxSeleccionMultiple.Fondo.Deshabilitado}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource Color.ComboBoxSeleccionMultiple.Borde.Deshabilitado}"/>
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Estilo de checkbox que representa el contenedor de un item en un combo box de seleccion multiple -->
    <Style x:Key="EstiloContenedorItemsMultiselect" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border 
                        SnapsToDevicePixels="true">

                        <ContentPresenter HorizontalAlignment="Stretch" 
                                          VerticalAlignment="Stretch" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Estilo de un combobox de seleccion multiple-->
    <Style x:Key="EstiloMultiselectComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual2}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">

                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>

                        <Popup x:Name="PART_Popup" 
                               AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <theme:SystemDropShadowChrome 
                                x:Name="shadow" 
                                Color="Transparent" 
                                MinWidth="{Binding ActualWidth, ElementName=templateRoot}" 
                                MaxHeight="{TemplateBinding MaxDropDownHeight}">

                                <Border x:Name="dropDownBorder" Background="White" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">

                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle 
                                            x:Name="opaqueRect"
                                            Fill="{Binding Background, ElementName=dropDownBorder}" 
                                            Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                            Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                            </Canvas>

                                            <ItemsPresenter
                                                x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                                            </ItemsPresenter>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>

                        <ToggleButton
                            x:Name="toggleButton"
                            Background="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            Grid.ColumnSpan="2"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxToggleButton}"/>

                        <StackPanel
                            Margin="5 5 0 5"

                            Orientation="Horizontal"
                        
                            IsHitTestVisible="False">

                            <TextBlock
                                x:Name="descripcion"

                                VerticalAlignment="Center"

                                Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:UserControlMultiSelectComboBox}}, Path=Descripcion}"/>

                            <TextBlock
                                Margin="5 5 0 5"

                                IsHitTestVisible="False"

                                TextWrapping="NoWrap"
                                TextTrimming="CharacterEllipsis"
                                Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=DataContext.ToStringItemsSeleccionados}"/>

                        </StackPanel>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">

        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>

            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome 
                        x:Name="shadow" 
                        Color="Transparent" 
                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}" 
                        MaxHeight="{TemplateBinding MaxDropDownHeight}">

                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">

                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle 
                                            x:Name="opaqueRect"
                                            Fill="{Binding Background, ElementName=dropDownBorder}" 
                                            Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                            Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>

                                <ItemsPresenter 
                                        x:Name="ItemsPresenter" 
                                        KeyboardNavigation.DirectionalNavigation="Contained" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                                </ItemsPresenter>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>

            <ToggleButton
                    x:Name="toggleButton"
                    Background="{TemplateBinding Background}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    Grid.ColumnSpan="2"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxToggleButton}"/>

            <StackPanel
                    Margin="0 5 0 5"

                    Orientation="Horizontal"
                        
                    IsHitTestVisible="False">

                <TextBlock
                        Padding="5 5 0 5"
                        x:Name="descripcion"

                        VerticalAlignment="Center"

                        Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:UserControlComboBoxConDescripcion}}, Path=Descripcion}"/>

                <ContentPresenter 
                    x:Name="contentPresenter" 
                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                    Content="{TemplateBinding SelectionBoxItem}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    IsHitTestVisible="false" Margin="{TemplateBinding Padding}" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </StackPanel>



        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="#A826A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="#FF26A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="#2E0080FF"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="#99006CD9"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="#FF26A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" Color="#5426A0DA"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" Color="#FF26A0DA"/>

    <Style x:Key="ComboBoxItemStyle1" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual2}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">

                        <ContentPresenter
                            x:Name="Contenido"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding ElementName=Contenido, Path=Content.ColorResaltadoItemComboBox}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHover.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding ElementName=Contenido, Path=Content.ColorResaltadoItemComboBox}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewFocus.Border}"/>
                        </MultiTrigger>

                        <!-- Colorcito mouse over -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:UserControlBloqueBase}, Path=ColorRellenoBloque}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Border}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxBloques" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle1}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>

        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
    </Style>

    <!-- Estilo para el contenedor de los items en una ListBox -->
    <Style TargetType="{x:Type ListBoxItem}" x:Key="EstiloContenedorItemListBox">

        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ListBoxItem}">

                    <Border
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"

                        Background="{TemplateBinding Background}"
                                        
                        Padding="5">

                        <!-- Contenido -->
                        <ContentPresenter/>
                    </Border>

                </ControlTemplate>

            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <!-- Cuando el elemento es seleccionado... -->
            <Trigger Property="IsSelected" Value="True">
                <Trigger.Setters>
                    <!-- Cambiamos el color de su borde -->
                    <Setter Property="BorderBrush" Value="{StaticResource Color.ListBox.BordeItemSeleccionado}"/>

                    <!-- Cambiamos el color de su fondo -->
                    <Setter Property="Background" Value="{StaticResource Color.ListBox.FondoItemSeleccionado}"/>
                </Trigger.Setters>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ListViewItem}" x:Key="EstiloListViewItem">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">

                    <Border>

                        <ContentPresenter/>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region TabControl -->

    <Style TargetType="{x:Type TabItem}">

        <Setter Property="Background" Value="{StaticResource Color.TabItem.Fondo.Estatico}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Color.TabItem.Borde.Estatico}"/>
        <Setter Property="Foreground" Value="{StaticResource Color.TabItem.Texto.Estatico}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="6 3 5 3"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">

                    <!--Tab-->
                    <Grid>

                        <Border
                            x:Name="border"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1 1 1 0"
                            Margin="0">

                            <Border x:Name="innerBorder"  Margin="-1" Opacity="0" BorderThickness="1 1 1 0"/>

                        </Border>

                            <!--Contenido-->
                            <ContentPresenter
                                x:Name="header"
                                ContentSource="Header" 
                                Focusable="False"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsPresenter}}, Path=HorizontalAlignment}"
                                VerticalAlignment="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsPresenter}}, Path=VerticalAlignment}"/>
                        
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Color.TabItem.Fondo.MouseOver}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Color.TabItem.Fondo.MouseOver}"/>
                            <Setter Property="Foreground" Value="{StaticResource Color.TabItem.Texto.MouseOver}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Color.TabItem.Fondo.Deshabilitado}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Color.TabItem.Borde.Deshabilitado}"/>
                            <Setter Property="Foreground" Value="{StaticResource Color.TabItem.Texto.Deshabilitado}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{StaticResource Color.TabItem.Texto.Seleccionado}"/>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Color.TabItem.Fondo.Seleccionado}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Color.TabItem.Borde.Seleccionado}"/>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="TabItemStyle1" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="{StaticResource TabItem.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="6,2,6,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder"
                                Background="{TemplateBinding Background}" 
                                BorderThickness="1,1,1,0"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Margin="0">

                            <Border 
                                x:Name="innerBorder" 
                                Background="{StaticResource TabItem.Selected.Background}" 
                                BorderThickness="1,1,1,0" 
                                BorderBrush="{StaticResource TabItem.Selected.Border}"
                                Margin="-1"
                                Opacity="0">
                            </Border>
                        </Border>
                        <ContentPresenter 
                            x:Name="contentPresenter" 
                            ContentSource="Header"
                            Focusable="False"
                            HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

</ResourceDictionary>