<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:AppGM">

    <!--..................................ESTILOS PARA BOTONES...........................................-->

    <Style TargetType="{x:Type ButtonBase}" x:Key="Prueba">
        <Setter Property="FontFamily" Value="{StaticResource 'Font Canon'}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                        <TextBlock 
                            Text="{TemplateBinding Content}"
                            FontFamily="{TemplateBinding FontFamily}"
                            TextAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Estilo base para los botones de la aplicacion, por defecto no tienen fondo o borde -->
    <Style TargetType="{x:Type ButtonBase}" x:Key="BotonBase">

        <Setter Property="Background" Value="{StaticResource Color.Boton.Fondo.Estatico}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Color.Boton.Borde.Estatico}"/>
        <Setter Property="Foreground" Value="{StaticResource Color.Boton.Texto.Estatico}"/>

        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="Font Canon"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                        <TextBlock 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{TemplateBinding Content}"
                            TextAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Cuando el boton esta desabilitado cambiamos los colores del texto y del fondo -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Color.Boton.Texto.MouseOver}"/>
                <Setter Property="Background" Value="{StaticResource Color.Boton.Fondo.MouseOver}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Color.Boton.Borde.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Color.Boton.Texto.Seleccionado}"/>
                <Setter Property="Background" Value="{StaticResource Color.Boton.Fondo.Seleccionado}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Color.Boton.Borde.Seleccionado}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Color.Boton.Texto.Deshabilitado}"/>
                <Setter Property="Background" Value="{StaticResource Color.Boton.Fondo.Deshabilitado}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Color.Boton.Borde.Deshabilitado}"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource BotonBase}"/>

    <!-- Estilo base para los botones de la aplicacion sin texto, por default no tienen fondo o borde -->
    <Style TargetType="{x:Type ButtonBase}" x:Key="BotonConFondoTransparente">
        
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- Estilo para los botones de la barra superior de la ventana -->
    <Style TargetType="{x:Type ButtonBase}" x:Key="BotonVentanaPrincipal">

        <Setter Property="Padding" Value="3 0"/>
        <Setter Property="Background" Value="Transparent"/>

        <!-- Hacemos este boton testeable para hits dentro del chrome porque el titulo cae dentro del chrome de la ventana -->
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Button}">

                    <Border Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                        <TextBlock 
                            Text="{TemplateBinding Content}"
                            Foreground="#96EDD2"
                            VerticalAlignment="Center">
                        </TextBlock>
                    </Border>

                </ControlTemplate>

            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <!-- Cuando el mouse pasa sobre el boton cambiar el color del fondo -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="DarkGray"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <!-- Estilo para el boton para cerrar la ventana principal -->
    <Style TargetType="{x:Type ButtonBase}" x:Key="BotonCerrarVentanaPrincipal" BasedOn="{StaticResource BotonVentanaPrincipal}">

        <Setter Property="Background" Value="Transparent"/>

        <Style.Triggers>

            <!-- Cuando el mouse pasa sobre el boton cambiar el color del fondo -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Crimson"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <!-- Boton cuyo marco se resalta cuando el cursor se encuentra sobre ellos -->
    <Style TargetType="{x:Type ButtonBase}" x:Key="BotonMarcoResaltable">

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Button}">

                    <Border Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            x:Name="border">

                        <TextBlock Text="{TemplateBinding Content}"/>
                    </Border>

                    <!-- Cuando el cursor esta sobre el boton cambiar el color del borde -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="Aqua"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>

    <!-- Botones de la barra derecha del menu principal del rol -->
    <Style TargetType="{x:Type Button}" x:Key="BotonMenuRol">

        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="5 10"/>
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Button}">

                    <Border Padding="{TemplateBinding Padding}" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            x:Name="border">

                        <TextBlock Text="{TemplateBinding Content}" 
                                   IsHitTestVisible="False"/>

                    </Border>

                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            
                            <!-- Cuando el mouse esta sobre el boton y el borde tiene una anchura de cero -->
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition SourceName="border" Property="BorderThickness" Value="0"/>
                            </MultiTrigger.Conditions>

                            <!-- Cambiamos el color del fondo -->
                            <MultiTrigger.Setters>
                                <Setter TargetName="border" Property="Background" Value="Aqua"/>
                            </MultiTrigger.Setters>

                        </MultiTrigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>

    <!-- Botones de las solapas superiores en la seccion de mapas-->
    <Style TargetType="{x:Type Button}" x:Key="BotonSolapaMapa" BasedOn="{StaticResource BotonMenuRol}">

        <Setter Property="Padding" Value="5 1"/>

    </Style>

    <!-- Boton cuyo fondo se resalta con una transicion suave cuando el cursor se posa sobre el -->
    <Style x:Key="BotonFondoResaltable" TargetType="{x:Type Button}" BasedOn="{StaticResource BotonBase}">

        <Style.Triggers>

            <!-- Cuando el mouse entre en el area del boton -->
            <EventTrigger RoutedEvent="MouseEnter">

                <BeginStoryboard>

                    <Storyboard
                        TargetProperty="Background.Color">

                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Background.Color" To="#06140d"/>

                    </Storyboard>
                </BeginStoryboard>

            </EventTrigger>

            <!-- Cuando el boton sale del area del boton -->
            <EventTrigger RoutedEvent="MouseLeave">

                <BeginStoryboard>
                    <Storyboard 
                        TargetProperty="Background.Color">

                        <ColorAnimation Duration="0:0:0.2" To="#06140d"/>

                    </Storyboard>
                </BeginStoryboard>

            </EventTrigger>

        </Style.Triggers>

    </Style>

    <!-- Boton animado para la opcion de reglas en el menu princiapl -->
    <Style x:Key="BotonClima" TargetType="{x:Type Button}">

        <Setter Property="Background" Value="#121212"/>
        <Setter Property="BorderBrush" Value="#9ac8bd"/>

        <Setter Property="Foreground" Value="#9ac8bd"></Setter>
        <Setter Property="FontFamily" Value="{StaticResource 'Font Awesome Regular'}"></Setter>

    </Style>

    <!-- Boton animado para la opcion de reglas en el menu princiapl -->
    <Style x:Key="BotonReglas" TargetType="{x:Type Button}" BasedOn="{StaticResource BotonConFondoTransparente}">

        <Setter Property="Content" Value="{StaticResource ImagenBotonRulesIdle}"/>

        <Style.Triggers>

            <!-- Cuando el mouse pasa sobre el boton, cambia su imagen -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonRulesMouse}"/>
            </Trigger>

            <!-- Cuando se hace click sobre el boton, cambia su imagen -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonRulesClick}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <!-- Boton animado para la opcion de informacion en el menu princiapl -->
    <Style x:Key="BotonInfo" TargetType="{x:Type Button}" BasedOn="{StaticResource BotonConFondoTransparente}">

        <Setter Property="Content" Value="{StaticResource ImagenBotonInfoIdle}"/>

        <Style.Triggers>

            <!-- Cuando el mouse pasa sobre el boton, cambia su imagen -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonInfoMouse}"/>
            </Trigger>

            <!-- Cuando se hace click sobre el boton, cambia su imagen -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonInfoClick}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <!-- Boton animado para la opcion de items en el menu princiapl -->
    <Style x:Key="BotonItems" TargetType="{x:Type Button}" BasedOn="{StaticResource BotonConFondoTransparente}">

        <Setter Property="Content" Value="{StaticResource ImagenBotonItemsIdle}"/>

        <Style.Triggers>

            <!-- Cuando el mouse pasa sobre el boton, cambia su imagen -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonItemsMouse}"/>
            </Trigger>

            <!-- Cuando se hace click sobre el boton, cambia su imagen -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonItemsClick}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <!-- Boton animado para las flechas de rotacion de cartas roles en el menu princiapl -->
    <Style x:Key="BotonFlechaIzquierdaMenuPrincipal" TargetType="{x:Type Button}" BasedOn="{StaticResource BotonConFondoTransparente}">

        <Setter Property="Content" Value="{StaticResource ImagenBotonFlechitaIzquierdaIdle}"/>

        <Style.Triggers>

            <!-- Cuando el mouse pasa sobre el boton, cambia su imagen -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonFlechitaIzquierdaMouse}"/>
            </Trigger>

            <!-- Cuando se hace click sobre el boton, cambia su imagen -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonFlechitaIzquierdaClick}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <!-- Boton animado para las flechas de rotacion de cartas roles en el menu princiapl -->
    <Style x:Key="BotonFlechaDerechaMenuPrincipal" TargetType="{x:Type Button}" BasedOn="{StaticResource BotonConFondoTransparente}">

        <Setter Property="Content" Value="{StaticResource ImagenBotonFlechitaDerechaIdle}"/>

        <Style.Triggers>

            <!-- Cuando el mouse pasa sobre el boton, cambia su imagen -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonFlechitaDerechaMouse}"/>
            </Trigger>

            <!-- Cuando se hace click sobre el boton, cambia su imagen -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Content" Value="{StaticResource ImagenBotonFlechitaDerechaClick}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <!-- Estilo para togglebutton de plegar y desplegar contenido -->
    <Style TargetType="{x:Type ToggleButton}" x:Key="BotonPlegarDesplegar">

        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>

        <Setter Property="Background" Value="#121212" />
        <Setter Property="Foreground" Value="Aqua" />

        <Setter Property="Content" Value="{StaticResource Fa-FlechaDerecha-Chevron}"/>

        <Setter Property="FontFamily" Value="{StaticResource 'Font Awesome Regular'}" />

        <Style.Triggers>

            <!-- Cuando el cursor este sobre el control el fondo cambia de color -->
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.Setters>
                    <Setter Property="Background" Value="#1f1f1f"></Setter>
                </Trigger.Setters>
            </Trigger>

            <!-- Cuando el usuario presiona la flecha esta pasa a apuntar hacia la derecha -->
            <Trigger Property="IsChecked" Value="True">
                <Trigger.Setters>
                    <Setter Property="Content" Value="{StaticResource Fa-FlechaIzquierda-Chevron}" />
                </Trigger.Setters>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Color.TextBox.Texto.Deshabilitado}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <!-- Estilo para checkboxes que cambia el tilde por una flecha -->
    <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxDropDown">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <!-- El unico elemento que necesitamos es un bloque de texto -->
                    <TextBlock 
                        x:Name="Texto"
                        Foreground="{TemplateBinding Foreground}"
                        FontFamily="{StaticResource 'Font Awesome Regular'}"
                        Text="{StaticResource Fa-FlechaDerecha-Chevron}"/>

                    <ControlTemplate.Triggers>

                        <!-- Cuando el cursor este sobre el control el fondo cambia de color -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="Texto" Property="Background" 
                                        Value="#88A9A9A9"></Setter>
                            </Trigger.Setters>
                        </Trigger>

                        <!-- Cuando el usuario presiona la flecha esta pasa a apuntar hacia abajo -->
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="Texto" Property="Text" 
                                        Value="{StaticResource Fa-FlechaAbajo-Chevron}"/>
                            </Trigger.Setters>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Color.TextBox.Texto.Deshabilitado}"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <!-- Estilo para los botones de solapas horizontales -->
    <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxSolapa">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <Border x:Name="Border"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="0 0 2 0">

                        <!-- El unico elemento que necesitamos es un bloque de texto -->
                        <TextBlock 
                            x:Name="Texto"
                            Foreground="{TemplateBinding Foreground}"
                            FontFamily="{TemplateBinding FontFamily}"
                            Text="{TemplateBinding Tag}"
                            FontSize="{TemplateBinding FontSize}">

                            <TextBlock.LayoutTransform>
                                <RotateTransform Angle="90"/>
                            </TextBlock.LayoutTransform>
                        </TextBlock>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BorderBrush}"/>
                            </Trigger.Setters>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BorderBrush}"/>
                            </Trigger.Setters>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- Estilo para los botones de solapas horizontales -->
    <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxSolapaHorizontal">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <Border x:Name="Border"
                            Background="Transparent"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}">

                        <!-- El unico elemento que necesitamos es un bloque de texto -->
                        <TextBlock 
                            x:Name="Texto"
                            Foreground="{TemplateBinding Foreground}"
                            FontFamily="{TemplateBinding FontFamily}"
                            Text="{TemplateBinding Content}"
                            FontSize="{TemplateBinding FontSize}">
                        </TextBlock>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter TargetName="Border" Property="BorderThickness" Value="0 0 0 1"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter TargetName="Border" Property="BorderThickness" Value="0 0 0 1"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>